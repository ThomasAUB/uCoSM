#pragma once


// simple order process
struct SimpleQueue_M
{

	void executeAfter(SimpleQueue_M *inPrev){
		mPrev = inPrev;
	}

	void init(){
		mPrev = nullptr;
		mIsStarted = false;
	}

    bool isExeReady() const {
		if(mPrev){
			return mPrev->mIsStarted;
		}else{
			return true;
		}
	}

	bool isDelReady() const {return true;}

	void makePreExe(){}

	void makePreDel(){}

	void makePostExe(){
		mIsStarted = true;	
	}

private:

	SimpleQueue_M *mPrev;
	bool mIsStarted;

};



// automatically updates the order of process
struct AutoQueue_M
{

	void executeAfter(AutoQueue_M *inPrev){
		if(!inPrev){
			return;
		}
		if(mPrev){
			inPrev->mPrev = mPrev;
			mPrev->mNext = inPrev;
		}
		inPrev->mNext = this;
		mPrev = inPrev;
	}

	void executeBefore(AutoQueue_M *inNext){
		if(!inNext){
			return;
		}
		if(mNext){
			inNext->mNext = mNext;
			mNext->mPrev = inNext;
		}
		inNext->mPrev = this;
		mNext = inNext;
	}

	void init(){
		mPrev = nullptr;
		mNext = nullptr;
		mIsStarted = false;
	}

    bool isExeReady() const {
		if(mPrev){
			return mPrev->mIsStarted;
		}else{
			return true;
		}
	}

	bool isDelReady() const {return true;}

	void makePreExe(){}

	void makePreDel(){
		if(mPrev && mNext){
			mPrev->mNext = mNext;
			mNext->mPrev = mPrev;
		}else if(mPrev){
			mPrev->mNext = nullptr;
		}else if(mNext){
			mNext->mPrev = nullptr;
		}
	}

	void makePostExe(){
		mIsStarted = true;	
	}

private:

	AutoQueue_M *mPrev, mNext;
	bool mIsStarted;

};


