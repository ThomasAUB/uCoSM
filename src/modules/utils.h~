/*
 * Copyright (C) 2020 Thomas AUBERT <aubert.thms@gmail.com>
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions
 * are met:
 * 1. Redistributions of source code must retain the above copyright
 *    notice, this list of conditions and the following disclaimer.
 * 2. Redistributions in binary form must reproduce the above copyright
 *    notice, this list of conditions and the following disclaimer in the
 *    documentation and/or other materials provided with the distribution.
 * 3. Neither the name ``Thomas AUBERT'' nor the name of any other
 *    contributor may be used to endorse or promote products derived
 *    from this software without specific prior written permission.
 * 
 * uCosmDev IS PROVIDED BY Thomas AUBERT ``AS IS'' AND ANY EXPRESS
 * OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
 * WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
 * ARE DISCLAIMED.  IN NO EVENT SHALL Thomas AUBERT OR ANY OTHER CONTRIBUTORS
 * BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
 * CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
 * SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR
 * BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,
 * WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR
 * OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF
 * ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 */

#pragma once





template<typename T, uint16_t Size>
struct Fifo
{

	Fifo() : mIndex(0)
	{}

	bool push(T data)
	{
		if(isFull()){return false;}
		mElems[mIndex++] = data;
		return true;
	}

	T pop()
	{
		if(!mIndex){return T();}
		return mElems[--mIndex];
	}

	bool isEmpty()
	{
		return !mIndex;
	}

	bool isFull()
	{
		return (mIndex==Size);
	}
	
private :

	uint16_t mIndex;

	T mElems[Size];

};




#include <limits>

// Fixed size dynamic memory allocation
// features :
//  - Allows to allocate and release a buffer of sizeof(elem_t) bytes
//  - Forbids task deletion if a buffer is allocated to avoid memory leakage
//  - The number of buffer per task types has a maximum value of 32
//	- If auto_release is "true", the module will automatically release allocated memory on deletion 


struct IMemPoolBase{
	

	using blockID_t = uint8_t;

	void initID(blockID_t& ioBlockID){
		blockID_t = 0;
	}
	
	virtual void *newBlock(blockID_t& ioBlockID) = 0;

	virtual bool deleteBlock(blockID_t& ioBlockID) = 0;

	virtual void *getBlock(blockID_t inBlockID) = 0;

	virtual size_t getBlockSize() = 0;

	virtual bool isAllocated(blockID_t inBlockID) = 0;
	
};

template<size_t block_size, uint8_t block_count>
struct MemPool32_M : public IMemPoolBase
{
	
	static_assert(block_count <= 32, "size of pool must not exceed 32");
	
	static_assert( (block_size * block_count ) > 4, 
	"Suboptimal implementation : Pool's size inferior to overhead's");

	void *newBlock(blockID_t& ioBlockID)
	{
		// pool is full
		if(mMemoryMap == (1<<block_count)-1){ return nullptr; }

		// task already has allocated memory
		if(ioBlockID){ return nullptr; }
		
		uint8_t i=0;

		do{
			if(!mMemoryMap&(1<<i)) // slot free
			{
				mMemoryMap |= (1<<i); // take slot

				ioBlockID = i+1; // stores the index
				
				return &mBlocks[i];
			}
		}while(++i<block_count);
		
		// allocation error : should not happen
		return nullptr;
	}
		
	bool deleteBlock(blockID_t& ioBlockID)
	{

		// pool is empty, nothing to free
		if(!mMemoryMap){ return false; }


		// security check : verify that the memory has been allocated
		// and that ID and map coincide
		if(!isAllocated(ioBlockID)){
			//ioIndex = 0; // should we?
			return false;
		}
			
		// release memory
		mMemoryMap &= ~(1<<(ioBlockID-1));

		// delete index
		ioBlockID = 0;
		
		return true;

	}

	void *getBlock(blockID_t inBlockID)
	{
		if(!inBlockID || inBlockID > block_count){
			return nullptr; 
		}
		return &mBlocks[inBlockID-1];
	}

	size_t getBlockSize(){
		return block_size;
	}

	bool isAllocated(blockID_t inBlockID){
		if(inBlockID && inBlockID <= block_count){
			return (mMemoryMap&(1<<(inBlockID-1)));
		}
		return false;
	}
	
private:


	uint8_t mBlocks[block_count][block_size];
			
	uint32_t mMemoryMap;

};










template<typename Derived>
struct ObjectCounter
{
	ObjectCounter() : index(sCount++)
	{}
	const index_t index;
private:
	static index_t sCount;
};

template<typename Derived>
index_t ObjectCounter<Derived>::sCount = 0;




